"""Convert all tables and column names to lowercase

Revision ID: f5d14797658c
Revises: cdeac4c3bfe3
Create Date: 2021-06-16 18:51:41.617461

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "f5d14797658c"
down_revision = "cdeac4c3bfe3"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "country",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=True),
        sa.Column("base_url", sa.String(length=100), nullable=True),
        sa.Column("latitude", sa.Float(precision=6), nullable=False),
        sa.Column("longitude", sa.Float(precision=6), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "region",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("country_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=True),
        sa.Column("latitude", sa.Float(precision=6), nullable=False),
        sa.Column("longitude", sa.Float(precision=6), nullable=False),
        sa.ForeignKeyConstraint(
            ["country_id"],
            ["country.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "course",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("region_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("url", sa.String(length=200), nullable=False),
        sa.Column("latitude", sa.Float(precision=6), nullable=False),
        sa.Column("longitude", sa.Float(precision=6), nullable=False),
        sa.Column("description", sa.String(length=8000), nullable=False),
        sa.ForeignKeyConstraint(
            ["region_id"],
            ["region.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "event",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("course_id", sa.Integer(), nullable=False),
        sa.Column("run_sequence_number", sa.Integer(), nullable=False),
        sa.Column("date", sa.String(length=10), nullable=False),
        sa.ForeignKeyConstraint(
            ["course_id"],
            ["course.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "run",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("event_id", sa.Integer(), nullable=False),
        sa.Column("parkrunner_id", sa.String(length=50), nullable=False),
        sa.Column("position", sa.Integer(), nullable=False),
        sa.Column("hours", sa.Integer(), nullable=True),
        sa.Column("minutes", sa.Integer(), nullable=True),
        sa.Column("seconds", sa.Integer(), nullable=True),
        sa.Column("age_category", sa.String(length=9), nullable=True),
        sa.Column("age_grade", sa.Float(precision=2), nullable=True),
        sa.Column("gender", sa.String(length=1), nullable=True),
        sa.Column("gender_position", sa.Integer(), nullable=True),
        sa.Column("note", sa.String(length=50), nullable=True),
        sa.ForeignKeyConstraint(
            ["event_id"],
            ["event.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    op.execute(
        """
        INSERT INTO country (id, name, base_url, latitude, longitude)
        SELECT "CountryId", "Name", "BaseUrl", "Latitude", "Longitude"
        FROM "Countries"
    """
    )

    op.execute(
        """
        INSERT INTO region (id, country_id, name, latitude, longitude)
        SELECT "RegionId", "CountryId", "Name", "Latitude", "Longitude"
        FROM "Regions"
    """
    )
    op.execute(
        """
        INSERT INTO course (id, region_id, name, url, latitude, longitude, description)
        SELECT
            "CourseId",
            "RegionId",
            "Name",
            "Url",
            "Latitude",
            "Longitude",
            "Description"
        FROM "Courses"
    """
    )
    op.execute(
        """
        INSERT INTO event (id, course_id, run_sequence_number, date)
        SELECT "EventId", "CourseId", "RunSequenceNumber", "Date"
        FROM "Events"
    """
    )
    op.execute(
        """
        INSERT INTO run (
            id,
            event_id,
            parkrunner_id,
            position,
            hours,
            minutes,
            seconds,
            age_category,
            age_grade,
            gender,
            gender_position,
            note
        )
        SELECT
            "RunId",
            "EventId",
            "ParkRunnerId",
            "Position",
            "Hours",
            "Minutes",
            "Seconds",
            "AgeCategory",
            "AgeGrade",
            "Gender",
            "GenderPosition",
            "Note"
        FROM "Runs"
    """
    )

    op.drop_table("Runs")
    op.drop_table("Courses")
    op.drop_table("Events")
    op.drop_table("Regions")
    op.drop_table("Countries")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "Countries",
        sa.Column(
            "CountryId",
            sa.INTEGER(),
            server_default=sa.text("nextval('\"Countries_CountryId_seq\"'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("Name", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column(
            "BaseUrl", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
        sa.Column("Latitude", sa.REAL(), autoincrement=False, nullable=False),
        sa.Column("Longitude", sa.REAL(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("CountryId", name="Countries_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "Regions",
        sa.Column(
            "RegionId",
            sa.INTEGER(),
            server_default=sa.text("nextval('\"Regions_RegionId_seq\"'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("CountryId", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("Name", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column("Latitude", sa.REAL(), autoincrement=False, nullable=False),
        sa.Column("Longitude", sa.REAL(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["CountryId"], ["Countries.CountryId"], name="Regions_CountryId_fkey"
        ),
        sa.PrimaryKeyConstraint("RegionId", name="Regions_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "Events",
        sa.Column(
            "EventId",
            sa.INTEGER(),
            server_default=sa.text("nextval('\"Events_EventId_seq\"'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("CourseId", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "RunSequenceNumber", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column("Date", sa.VARCHAR(length=10), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["CourseId"], ["Courses.CourseId"], name="Events_CourseId_fkey"
        ),
        sa.PrimaryKeyConstraint("EventId", name="Events_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "Courses",
        sa.Column(
            "CourseId",
            sa.INTEGER(),
            server_default=sa.text("nextval('\"Courses_CourseId_seq\"'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("RegionId", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("Name", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column("Url", sa.VARCHAR(length=200), autoincrement=False, nullable=False),
        sa.Column("Latitude", sa.REAL(), autoincrement=False, nullable=False),
        sa.Column("Longitude", sa.REAL(), autoincrement=False, nullable=False),
        sa.Column(
            "Description", sa.VARCHAR(length=8000), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["RegionId"], ["Regions.RegionId"], name="Courses_RegionId_fkey"
        ),
        sa.PrimaryKeyConstraint("CourseId", name="Courses_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "Runs",
        sa.Column(
            "RunId",
            sa.INTEGER(),
            server_default=sa.text("nextval('\"Runs_RunId_seq\"'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("EventId", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "ParkRunnerId", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column("Position", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("Hours", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("Minutes", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("Seconds", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "AgeCategory", sa.VARCHAR(length=9), autoincrement=False, nullable=True
        ),
        sa.Column("AgeGrade", sa.REAL(), autoincrement=False, nullable=True),
        sa.Column("Gender", sa.VARCHAR(length=1), autoincrement=False, nullable=True),
        sa.Column("GenderPosition", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("Note", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["EventId"], ["Events.EventId"], name="Runs_EventId_fkey"
        ),
        sa.PrimaryKeyConstraint("RunId", name="Runs_pkey"),
    )
    op.drop_table("run")
    op.drop_table("event")
    op.drop_table("course")
    op.drop_table("region")
    op.drop_table("country")
    # ### end Alembic commands ###
